name: Oneplus_Ace5_Ultra_OKI

env:
  TZ: Asia/Shanghai
  ANDROID_VERSION: 'android15'
  KERNEL_VERSION: '6.6'

on:
  workflow_dispatch:
    inputs:

      kernel_suffix:
        description: '内核后缀(默认为原厂,开头无需连字符,请勿加入保留字符)'
        required: true
        default: 'android15-8-g29d86c5fc9dd-abogki428889875-4k'
      
      kernel_time:
        description: "内核构建日期更改(默认为原厂)"
        required: true
        default: 'Tue Jul  1 19:48:18 UTC 2025'

      ksu_type:
        description: 'KernelSU 分支'
        required: true
        type: choice
        default: 'sukisu'
        options:
          - 'SukiSU-Ultra'
          - 'KernelSU-Next'

      lz4_enable:
        description: '选择要安装的内存算法补丁类型'
        required: true
        type: choice
        default: '不安装任何补丁'
        options:
          - '不安装任何补丁'
          - '仅安装 lz4&zstd 补丁'
          - '仅安装 LZ4KD 补丁'
          - '安装全部补丁'

      baseband_guard:
        description: '内核防格机保护'
        required: true
        type: boolean
        default: 'true'
      
      bbr_enable:
        description: "启用BBR算法"
        required: true
        type: boolean
        default: 'false'
      


jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      ksuver: ${{ steps.ksu_version.outputs.ksuver }}
    steps:
      - name: 安装配置环境依赖
        run: |
          sudo apt-mark hold firefox
          sudo apt-mark hold libc-bin
          sudo apt purge man-db
          sudo rm -rf /var/lib/man-db/auto-update
          sudo apt update
          sudo apt-get install -y --no-install-recommends \
            curl bison flex make binutils git perl gcc python3 \
            python-is-python3 bc libssl-dev libelf-dev \
            bc aria2 zip unzip ccache

      - name: 配置ccache目录
        run: |
          echo "CCACHE_DIR=$HOME/.ccache_6.6.50" >> $GITHUB_ENV
          echo "CCACHE_MAXSIZE=3G" >> $GITHUB_ENV
          echo "当前磁盘空间："
          df -h
          echo "当前构建内核版本：6.6.50"
          rm -rf kernel_workspace
          mkdir kernel_workspace

      - name: 载入当前版本内核的 ccache缓存
        uses: actions/cache@v4
        id: ccache-restore
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-6.6.50-${{ runner.os }}-main
          restore-keys: |
            ccache-6.6.50-${{ runner.os }}-
            ccache-6.6.50-
      
      - name: 初始化并配置ccache
        run: |
          # 设置ccache环境变量
          export CCACHE_COMPILERCHECK="none"
          export CCACHE_BASEDIR="${{ github.workspace }}"
          export CCACHE_NOHASHDIR="true"
          export CCACHE_HARDLINK="true"
          export CCACHE_DIR="${{ env.CCACHE_DIR }}"
          export CCACHE_MAXSIZE="${{ env.CCACHE_MAXSIZE }}"
          
          # 确保ccache目录存在
          mkdir -p "$CCACHE_DIR"
          
          # 每次运行都重新配置缓存大小
          echo "配置ccache缓存大小为: $CCACHE_MAXSIZE"
          ccache -M "$CCACHE_MAXSIZE"
          ccache -o compression=true
          
          # 显示初始缓存状态
          echo "ccache初始状态:"
          ccache -s
          
          # 如果缓存恢复命中，显示详细信息
          if [ "${{ steps.ccache-restore.outputs.cache-hit }}" == 'true' ]; then
            echo "ccache缓存命中详情:"
            ccache -sv
          fi
      
      - name: 初始化源码仓库及llvm-Clang18工具链
        run: |
          cd kernel_workspace
          echo "正在克隆源码仓库..."
          aria2c -s16 -x16 -k1M https://github.com/ZXCLF/Oneplus_Ace5_Ultra_OKI/releases/download/Resource/android_kernel_oneplus_mt6991.zip -o common.zip && 
          unzip -q common.zip && 
          mv "android_kernel_oneplus_mt6991-oneplus-mt6991_v_15.0.2_ace5_ultra" common &&
          rm -rf common.zip &
          
          echo "正在克隆llvm-clang18工具链..." &&
          mkdir -p clang18 &&
          aria2c -s16 -x16 -k1M https://github.com/ZXCLF/Oneplus_Ace5_Ultra_OKI/releases/download/Resource/clang-r510928.zip -o clang.zip &&
          unzip -q clang.zip -d clang18 &&
          rm -rf clang.zip &
          
          echo "正在克隆构建工具..." &&
          aria2c -s16 -x16 -k1M https://github.com/ZXCLF/Oneplus_Ace5_Ultra_OKI/releases/download/Resource/build-tools.zip -o build-tools.zip &&
          unzip -q build-tools.zip &&
          rm -rf build-tools.zip &
          
          wait
          echo "所有源码及llvm-Clang18工具链初始化完成！"
          echo "正在去除 ABI 保护 & 去除 dirty 后缀..."
          rm common/android/abi_gki_protected_exports_* || true
          for f in common/scripts/setlocalversion; do
            sed -i 's/ -dirty//g' "$f"
            sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' "$f"
          done

      - name: 添加KernelSU
        id: ksu_version
        run: |
          # 进入内核工作目录
          cd kernel_workspace
          if [[ ${{ github.event.inputs.ksu_type }} == "SukiSU-Ultra" ]]; then
            echo "正在配置SukiSU Ultra..."
            curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/refs/heads/main/kernel/setup.sh" | bash -s susfs-main
            cd ./KernelSU
            # 获取当前 Git 提交的短哈希 (8位)
            GIT_COMMIT_HASH=$(git rev-parse --short=8 HEAD)
            echo "当前提交哈希: $GIT_COMMIT_HASH"
            export KSU_VERSION=$KSU_VERSION
            # 尝试最多 3 次获取 KernelSU API 版本号
            for i in {1..3}; do
              # 从远程 Makefile 中提取 KSU_API_VERSION
              KSU_API_VERSION=$(curl -s "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/susfs-main/kernel/Makefile" | 
                # 查找第一个包含版本定义的行
                grep -m1 "KSU_VERSION_API :=" | 
                # 提取等号后的值
                awk -F'= ' '{print $2}' | 
                # 删除所有空白字符
                tr -d '[:space:]')
              # 如果成功获取到版本号则跳出循环，否则等待 1 秒后重试
              [ -n "$KSU_API_VERSION" ] && break || sleep 1
            done
            # 如果获取失败，使用默认版本号 3.1.7
            [ -z "$KSU_API_VERSION" ] && KSU_API_VERSION="3.1.7"
            # 将 API 版本号存储到 GitHub 环境变量
            echo "KSU_API_VERSION=$KSU_API_VERSION" >> $GITHUB_ENV
            # 创建版本定义模板&版本格式函数: 使用获取的提交哈希和固定后缀
            # KSU_VERSION_API: API 版本定义
            # KSU_VERSION_FULL: 完整版本定义
            VERSION_DEFINITIONS=$'define get_ksu_version_full\nv\\$1-'"$GIT_COMMIT_HASH"$'@zxclfF\nendef\n\nKSU_VERSION_API := '"$KSU_API_VERSION"$'\nKSU_VERSION_FULL := v'"$KSU_API_VERSION"$'-'"$GIT_COMMIT_HASH"$'@zxclf'
            # 清理内核 Makefile 中的旧版本定义
            # 删除版本函数
            sed -i '/define get_ksu_version_full/,/endef/d' kernel/Makefile
            # 删除 API 版本定义
            sed -i '/KSU_VERSION_API :=/d' kernel/Makefile
            # 删除完整版本定义
            sed -i '/KSU_VERSION_FULL :=/d' kernel/Makefile
            # 在 REPO_OWNER 行后插入新版本定义
            awk -v def="$VERSION_DEFINITIONS" '
              # 当找到 REPO_OWNER 行时，插入版本定义并设置标记
              /REPO_OWNER :=/ {print; print def; inserted=1; next}
              # 打印所有行
              1
              # 如果未找到插入点，在文件末尾追加
              END {if (!inserted) print def}
            ' kernel/Makefile > kernel/Makefile.tmp && mv kernel/Makefile.tmp kernel/Makefile

            KSU_VERSION=$(expr $(git rev-list --count main) + 10700 2>/dev/null || echo 111024)
            # 存储版本号到 GitHub 环境变量
            echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
            echo "ksuver=$KSU_VERSION" >> $GITHUB_OUTPUT

            # 验证修改结果
            grep -A10 "REPO_OWNER" kernel/Makefile  # 检查插入点后的内容
            grep "KSU_VERSION_FULL" kernel/Makefile # 确认版本定义存在
            echo "SukiSU版本号: v${KSU_API_VERSION}-${GIT_COMMIT_HASH}@zxclf"
          else
            echo "正在配置KernelSU Next..."
            curl -LSs "https://raw.githubusercontent.com/pershoot/KernelSU-Next/next-susfs/kernel/setup.sh" | bash -s next-susfs
            cd KernelSU-Next
            KSU_VERSION=$(expr $(curl -sI "https://api.github.com/repos/pershoot/KernelSU-Next/commits?sha=next&per_page=1" | grep -i "link:" | sed -n 's/.*page=\([0-9]*\)>; rel="last".*/\1/p') "+" 10200)
            echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
            echo "ksuver=$KSU_VERSION" >> $GITHUB_OUTPUT
            sed -i "s/DKSU_VERSION=11998/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile
          fi

      - name: 应用 KernelSU & SUSFS 补丁
        run: |
          cd kernel_workspace
          if [[ ${{ github.event.inputs.ksu_type }} == "SukiSU-Ultra" ]]; then
            echo "正在添加SukiSU Ultra补丁..."
            git clone https://github.com/ShirkNeko/susfs4ksu.git -b gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}
            git clone https://github.com/ShirkNeko/SukiSU_patch.git
            cp ./susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch ./common/
            cp ./susfs4ksu/kernel_patches/fs/* ./common/fs/
            cp ./susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
            cp ./SukiSU_patch/hooks/scope_min_manual_hooks_v1.5.patch ./common/
            cp ./SukiSU_patch/69_hide_stuff.patch ./common/
            cd ./common
            patch -p1 < 50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch || true
            patch -p1 < scope_min_manual_hooks_v1.5.patch || true
            patch -p1 < 69_hide_stuff.patch || true
          else
            echo "正在添加KernelSU Next补丁..."
            git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}
            git clone https://github.com/WildKernels/kernel_patches.git
            cp ./susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch ./common/
            cp ./susfs4ksu/kernel_patches/fs/* ./common/fs/
            cp ./susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
            cp ./kernel_patches/next/scope_min_manual_hooks_v1.5.patch ./common/
            cp ./kernel_patches/69_hide_stuff.patch ./common/
            cd ./common
            patch -p1 < 50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch || true
            patch -p1 -N -F 3 < scope_min_manual_hooks_v1.5.patch || true
            patch -p1 -N -F 3 < 69_hide_stuff.patch || true
          fi
          
      - name: 应用lz4&zstd补丁
        run: |
          if [[ "${{ github.event.inputs.lz4_enable }}" == "仅安装 lz4&zstd 补丁" || "${{ github.event.inputs.lz4_enable }}" == "安装全部补丁" ]]; then
            cd kernel_workspace
            git clone https://github.com/ZXCLF/Oneplus_Ace5_Ultra_OKI
            cp ./Oneplus_Ace5_Ultra_OKI/zram_patch/001-lz4.patch ./common/
            cp ./Oneplus_Ace5_Ultra_OKI/zram_patch/001-lz4-clearMake.patch ./common/
            cp ./Oneplus_Ace5_Ultra_OKI/zram_patch/lz4armv8.S ./common/lib
            cp ./Oneplus_Ace5_Ultra_OKI/zram_patch/002-zstd.patch ./common/
            cd ./common
            git apply -p1 < 001-lz4.patch || true
            git apply -p1 < 001-lz4-clearMake.patch || true
            patch -p1 < 002-zstd.patch || true
          fi

      - name: 应用 lz4kd 补丁
        run: |
          if [[ "${{ github.event.inputs.lz4_enable }}" == "仅安装 LZ4KD 补丁" || "${{ github.event.inputs.lz4_enable }}" == "安装全部补丁" ]]; then
            echo "正在添加lz4kd补丁…"
            cd kernel_workspace
            if [[ ${{ github.event.inputs.ksu_type }} == "KernelSU-Next" ]]; then
              git clone https://github.com/ShirkNeko/SukiSU_patch.git
            fi
            cd common
            cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./include/linux/
            cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./lib
            cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./crypto
            cp ../SukiSU_patch/other/zram/zram_patch/${{ env.KERNEL_VERSION }}/lz4kd.patch ./
            patch -p1 -F 3 < lz4kd.patch || true
          fi
          
      - name: 添加 KSU & SUSFS 配置项
        run: |
          cd kernel_workspace
          echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig
          if [[ "${{ github.event.inputs.lz4_enable }}" == "仅安装 LZ4KD 补丁" || "${{ github.event.inputs.lz4_enable }}" == "安装全部补丁" ]]; then
            echo "CONFIG_ZSMALLOC=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_CRYPTO_LZ4HC=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_CRYPTO_LZ4K=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_CRYPTO_LZ4KD=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_CRYPTO_842=y" >> ./common/arch/arm64/configs/gki_defconfig
            # 以下配置未核实必要性，待测试
            #echo "CONFIG_ZRAM_WRITEBACK=y" >> ./common/arch/arm64/configs/gki_defconfig
            #sed -i 's/CONFIG_ZRAM=m/CONFIG_ZRAM=y/g' ./common/arch/arm64/configs/gki_defconfig
            #sed -i 's/CONFIG_MODULE_SIG=y/CONFIG_MODULE_SIG=n/g' ./common/arch/arm64/configs/gki_defconfig
          fi
          # 开启O2编译优化配置
          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y" >> ./common/arch/arm64/configs/gki_defconfig
          #禁用 defconfig 检查
          sed -i 's/check_defconfig//' ./common/build.config.gki
          
      - name: 添加 BBR 拥塞控制算法
        run: |
          cd kernel_workspace
          if [[ "${{ github.event.inputs.bbr_enable }}" == "true" ]]; then
            echo "正在添加BBR拥塞控制算法..."
            echo "CONFIG_TCP_CONG_ADVANCED=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_TCP_CONG_BBR=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_TCP_CONG_CUBIC=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_TCP_CONG_VEGAS=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_TCP_CONG_NV=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_TCP_CONG_WESTWOOD=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_TCP_CONG_HTCP=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_TCP_CONG_BRUTAL=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_DEFAULT_TCP_CONG=bbr" >> ./common/arch/arm64/configs/gki_defconfig
          else
            echo "CONFIG_DEFAULT_TCP_CONG=cubic" >> ./common/arch/arm64/configs/gki_defconfig
          fi


      - name: 启用内核级基带保护
        run: |
          if [[ "${{ github.event.inputs.baseband_guard }}" == "true" ]]; then
            echo "正在启用启用内核级基带保护支持…"
            cd kernel_workspace
            echo "CONFIG_BBG=y" >> ./common/arch/arm64/configs/gki_defconfig
            cd ./common/security
            wget https://github.com/vc-teahouse/Baseband-guard/archive/refs/heads/master.zip
            unzip -q master.zip
            mv "Baseband-guard-main" baseband-guard
            printf '\nobj-$(CONFIG_BBG) += baseband-guard/\n' >> ./Makefile
            sed -i '/^config LSM$/,/^help$/{ /^[[:space:]]*default/ { /baseband_guard/! s/landlock/landlock,baseband_guard/ } }' ./Kconfig
            awk '
            /endmenu/ { last_endmenu_line = NR }
            { lines[NR] = $0 }
            END {
              for (i=1; i<=NR; i++) {
                if (i == last_endmenu_line) {
                  sub(/endmenu/, "", lines[i]);
                  print lines[i] "source \"security/baseband-guard/Kconfig\""
                  print ""
                  print "endmenu"
                } else {
                    print lines[i]
                }
              }
            }
            ' ./Kconfig > Kconfig.tmp && mv Kconfig.tmp ./Kconfig
            sed -i 's/selinuxfs.o //g' "./selinux/Makefile"
            cat "./baseband-guard/sepatch.txt" >> "./selinux/Makefile"
          fi

      - name: 添加制作名称
        run: |
          cd kernel_workspace
          echo "替换内核版本后缀..."
          echo "当前内核版本后缀：android15-8-g29d86c5fc9dd-abogki428889875-4k"
          for f in ./common/scripts/setlocalversion; do
              sed -i "\$s|echo \"\\\$res\"|echo \"-android15-8-g29d86c5fc9dd-abogki428889875-4k\"|" "$f"
              sudo sed -i 's/-4k/-android15-8-g29d86c5fc9dd-abogki428889875-4k/g' ./common/arch/arm64/configs/gki_defconfig
              sed -i 's/${scm_version}//' ./common/scripts/setlocalversion
          done
          echo "CONFIG_LOCALVERSION_AUTO=n" >> ./common/arch/arm64/configs/gki_defconfig
           
      - name: 构建内核
        run: |
          WORKDIR="$(pwd)"
          export PATH="/usr/lib/ccache:$PATH"
          export PATH="$WORKDIR/kernel_workspace/clang18/bin:$PATH"
          export PATH="$WORKDIR/kernel_workspace/build-tools/bin:$PATH"
          CLANG_DIR="$WORKDIR/kernel_workspace/clang18/bin"
          CLANG_VERSION="$($CLANG_DIR/clang --version | head -n 1)"
          LLD_VERSION="$($CLANG_DIR/ld.lld --version | head -n 1)"
          echo "编译器信息:"
          echo "Clang版本: $CLANG_VERSION"
          echo "LLD版本: $LLD_VERSION"
          pahole_version=$(pahole --version 2>/dev/null | head -n1); [ -z "$pahole_version" ] && echo "pahole版本：未安装" || echo "pahole版本：$pahole_version"
          export KBUILD_BUILD_TIMESTAMP="${{ github.event.inputs.kernel_time }}"
          export CCACHE_LOGFILE="${{ github.workspace }}/kernel_workspace/ccache.log"
          export CCACHE_COMPILERCHECK="none"
          export CCACHE_BASEDIR="${{ github.workspace }}"
          export CCACHE_NOHASHDIR="true"
          export CCACHE_HARDLINK="true"
          export CCACHE_DIR="${{ env.CCACHE_DIR }}"
          export CCACHE_MAXSIZE="3G"
          echo "sloppiness = time_macros,include_file_ctime,include_file_mtime,file_stat_matches,file_macro,time_macros,pch_defines" >> "$CCACHE_DIR/ccache.conf"
          
          cd kernel_workspace/common
          #在构建内核的同时清除不必要的.NET, Android NDK, Haskell, CodeQL运行库，清理空间且不阻塞后续步骤运行
          sudo rm -rf /usr/share/dotnet &
          sudo rm -rf /usr/local/lib/android &
          sudo rm -rf /opt/ghc &
          sudo rm -rf /opt/hostedtoolcache/CodeQL &
          find $(pwd) -type f -exec touch -d "2025-05-25 08:00:00" {} + &&
          make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC="ccache clang" LD=ld.lld HOSTLD=ld.lld O=out KCFLAGS+=-O2 KCFLAGS+=-Wno-error KCFLAGS+=-ferror-limit=0 gki_defconfig Image
          echo "内核编译完成！"
          echo "ccache状态："
          ccache -s
          echo "编译后空间:"
          df -h
         


          

      - name: 克隆 AnyKernel3 并打包
        run: |
          cd kernel_workspace
          rm -rf Oneplus_Ace5_Ultra_OKI AnyKernel3
          git clone --branch AnyKernel3 --depth 1 https://github.com/ZXCLF/Oneplus_Ace5_Ultra_OKI.git
          mv "Oneplus_Ace5_Ultra_OKI" AnyKernel3
          rm -rf ./AnyKernel3/.git
          cd AnyKernel3
          cp ../common/out/arch/arm64/boot/Image ./Image
          if [[ ! -f ./Image ]]; then
            echo "未找到内核镜像文件，构建可能出错"
            exit 1
          fi
          if [[ ${{ github.event.inputs.ksu_type }} == "SukiSU-Ultra" ]]; then
            KSU_TYPENAME="SukiSU"
          else
            KSU_TYPENAME="KSUNext"
          fi
          if [[ "${{ github.event.inputs.lz4_enable }}" == "仅安装 LZ4KD 补丁" || "${{ github.event.inputs.lz4_enable }}" == "安装全部补丁" ]]; then
            wget https://raw.githubusercontent.com/cctv18/oppo_oplus_realme_sm8650/refs/heads/main/zram.zip
          fi
          zip -r ../AnyKernel3_${KSU_TYPENAME}_${{ env.KSUVER }}_${{ env.KERNEL_VERSION }}_A15_${{ github.event.inputs.kernel_suffix }}.zip ./*

  
      - name: 上传 ZIP 工件
        uses: actions/upload-artifact@v4
        with:
          name: Kernel_ZIP_Artifacts
          path: ${{ github.workspace }}/kernel_workspace/AnyKernel*.zip
  
  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      actions: read
      
    steps:
      - name: 下载 ZIP 工件
        uses: actions/download-artifact@v4
        with:
          name: Kernel_ZIP_Artifacts
          path: ./release_zips

      - name: 设置环境变量
        run: |
          FULL_VERSION=${{ format('{0}.50-{1}', env.KERNEL_VERSION, github.event.inputs.kernel_suffix) }}
          echo "FULL_VERSION=$FULL_VERSION" >> $GITHUB_ENV
          export FULL_VERSION=$FULL_VERSION
          TIME="$(TZ='Asia/Shanghai' date +'%y%m%d%H%M%S')"
          TIME_FORM="$(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S')"
          echo "TIME=$TIME" >> $GITHUB_ENV
          echo "TIME_FORM=$TIME_FORM" >> $GITHUB_ENV
          TAG_HEAD="Ace5-Ultra-build"
          echo "TAG_HEAD=$TAG_HEAD" >> $GITHUB_ENV
          if [[ ${{ github.event.inputs.ksu_type }} == "SukiSU-Ultra" ]]; then
            KSU_BRANCH="SukiSU Ultra"
          else
            KSU_BRANCH="KernelSU Next"
          fi
          echo "KSU_BRANCH=$KSU_BRANCH" >> $GITHUB_ENV
          if [[ "${{ github.event.inputs.lz4_enable }}" == "仅安装 LZ4KD 补丁" || "${{ github.event.inputs.lz4_enable }}" == "安装全部补丁" ]]; then
            lz4kd_enable="true"
          else
            lz4kd_enable="false"
          fi
          if [[ "${{ github.event.inputs.lz4_enable }}" == "仅安装 lz4&zstd 补丁" || "${{ github.event.inputs.lz4_enable }}" == "安装全部补丁" ]]; then
            lz4_zstd_enable="true"
          else
            lz4_zstd_enable="false"
          fi
          echo "lz4kd_enable=$lz4kd_enable" >> $GITHUB_ENV
          echo "lz4_zstd_enable=$lz4_zstd_enable" >> $GITHUB_ENV
         
      - name: 创建发布
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "${{ env.TAG_HEAD }}-${{ env.TIME }}"
          name: "${{ env.TAG_HEAD }}-${{ env.FULL_VERSION }}"
          body: |
            ### 📱 Oneplus Ace5 Ultra 内核 | 构建信息
            - KernelSU分支：${{ env.KSU_BRANCH }}
            - 内核版本号: ${{ env.FULL_VERSION }}
            - 编译时间: ${{ env.TIME_FORM }}
            - 机型：Oneplus Ace5 Ultra 6.6.50 Android 15
            - LZ4KD支持：${{ env.lz4kd_enable }}
            - LZ4支持：${{ env.lz4_zstd_enable }}
            - 内核级基带保护支持：${{ github.event.inputs.baseband_guard }}
            - BBR 拥塞控制算法支持：${{ github.event.inputs.bbr_enable }}
            - SukiSU Ultra管理器下载：[SukiSU-Ultra](https://github.com/SukiSU-Ultra/SukiSU-Ultra/releases)
            - KernelSU Next管理器下载：[KernelSU-Next](https://github.com/KernelSU-Next/KernelSU-Next/releases)
            ### 📋 安装方法 | Installation Guide
            1. 若你的手机已经安装了第三方Recovery（如TWRP)，可下载对应机型的AnyKernel刷机包后进入Recovery模式，通过Recovery刷入刷机包后重启设备
            2. 若你的手机之前已有 root 权限，可在手机上安装[HorizonKernelFlasher](https://github.com/libxzr/HorizonKernelFlasher/releases)，在HorizonKernelFlasher中刷入AnyKernel刷机包并重启
            3. 若你之前已刷入SukiSU Ultra内核，且SukiSU Ultra管理器已更新至最新版本，可在SukiSU Ultra管理器中直接刷入AnyKernel刷机包并重启
            4. 刷入无lz4kd补丁版的内核前若刷入过lz4kd补丁版的内核，为避免出错，请先关闭zram模块
            #### ※※※刷写内核有风险，为防止出现意外导致手机变砖，在刷入内核前请务必备份boot等关键启动分区!※※※
          draft: false
          prerelease: false
          files: |
            release_zips/AnyKernel3_*.zip
